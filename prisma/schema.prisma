// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  department    String?
  role          String?
  birthDate     DateTime?
  phone         String?
  surname       String?
  givenName     String?
  street        String?
  descNo        Int?
  orientNo      String?
  municipality  String?
  postalCode    Int?
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
  branches      CompanyBranch[]
  assignedTags  CompanyTag[]
  internships   Internship[]   @relation("intern") 
  createdInternships   Internship[]   @relation("internshipCreator") 
  inspections   Inspection[]
  diaries       Diary[]
  reservations  Internship[]   @relation("reserved")
  texts         Text[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id                          Int             @id @default(autoincrement())
  country                     String?
  municipality                String?
  postalCode                  Int?
  street                      String?
  descNo                      Int?
  orientNo                    String?
  latitude                    Decimal?
  longitude                   Decimal?
  created                     DateTime
  text                        String?          //@db.Text
  companyBranches             CompanyBranch[]
  companies                   Company[]
  internships                 Internship[]
}

model Company {
  id                          Int             @id @default(autoincrement())
  name                        String
  companyIdentificationNumber Int?            @unique
  description                 String?         //@db.Text
  website                     String?
  active                      Boolean         @default(true)
  created                     DateTime
  creatorId                   String
  creator                     User           @relation(fields: [creatorId], references: [id], onDelete: Restrict)
  location                    Location       @relation(fields: [locationId], references: [id], onDelete: Restrict)
  locationId                  Int
  companyBranches             CompanyBranch[]
  companyTags                 CompanyTag[]
  internships                 Internship[]
}

model CompanyBranch {
  companyId                   Int
  locationId                  Int
  company                     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location                    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  name                        String?
  created                     DateTime
  creatorId                   String
  creator                     User           @relation(fields: [creatorId], references: [id], onDelete: Restrict)

  @@id([companyId, locationId])
}

model Template {
  id                             Int             @id @default(autoincrement())
  name                           String
  content                        String          //@db.Text
  sets                           Set[]
}

model Set {
  id                           Int             @id @default(autoincrement())
  name                         String
  schoolName                   String
  active                       Boolean         @default(true)
  editable                     Boolean         @default(true)
  start                        DateTime
  end                          DateTime
  representativeName           String
  representativeEmail          String
  representativePhone          String
  continuous                   Boolean
  hoursDaily                   Int
  daysTotal                    Int
  year                         Int
  internships                  Internship[]
  templateId                   Int
  template                     Template         @relation(fields: [templateId], references: [id], onDelete: Restrict)
  logoName                     String?
}

model Internship {
  id                           String             @id @default(cuid())
  companyRepName               String
  companyRepEmail              String?
  companyRepPhone              String?
  companyMentorName            String
  companyMentorEmail           String?
  companyMentorPhone           String?
  jobDescription               String          //@db.Text
  additionalInfo               String?         //@db.Text
  appendixText                 String?         //@db.Text
  user                         User            @relation(name: "intern", fields: [userId], references: [id], onDelete: Restrict)
  userId                       String
  classname                    String 
  created                      DateTime
  creatorId                    String
  creator                      User            @relation(name: "internshipCreator", fields: [creatorId], references: [id], onDelete: Restrict)
  updated                      DateTime
  set                          Set             @relation(fields: [setId], references: [id], onDelete: Restrict)
  setId                        Int
  company                      Company         @relation(fields: [companyId], references: [id], onDelete: Restrict)
  companyId                    Int
  location                     Location        @relation(fields: [locationId], references: [id], onDelete: Restrict)
  locationId                   Int
  reservationUser              User?           @relation(name: "reserved", fields: [reservationUserId], references: [id], onDelete: Restrict)
  reservationUserId            String?
  kind                         Int             @default(0)
  highlighted                  Boolean         @default(false)
  conclusion                   String?         //@db.Text
  state                        Int             @default(0)
  inspections                  Inspection[]
  diaries                      Diary[]
}

model Diary {
  id                           Int             @id @default(autoincrement())
  date                         DateTime
  internship                   Internship      @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  internshipId                 String
  text                         String          //@db.Text
  createdBy                    User            @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById                  String
  created                      DateTime        @default(now())   

  @@unique([internshipId, date])
}

model Inspection {
  id                            Int             @id @default(autoincrement())
  internship                    Internship      @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  internshipId                  String
  date                          DateTime        @default(now())
  inspectionUser                User            @relation(fields: [inspectionUserId], references: [id], onDelete: Restrict)
  inspectionUserId              String
  note                          String          //@db.Text
  result                        Int
  kind                          Int

  @@unique([internshipId, date])
}

model Tag {
  id                             Int             @id @default(autoincrement())
  text                           String
  type                           Int
  color                          String
  background                     String
  assignedTags                   CompanyTag[]
}

model CompanyTag {
  companyId                   Int
  tagId                       Int
  company                     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tag                         Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
  created                     DateTime
  creatorId                   String
  creator                     User           @relation(fields: [creatorId], references: [id], onDelete: Restrict)

  @@id([companyId, tagId])
}

model Text {
  id                       Int            @id @default(autoincrement())
  title                    String
  content                  String         //@db.Text
  shortable                Boolean        @default(true)
  published                Int            @default(0)
  priority                 Int            @default(0)
  created                  DateTime       @default(now())
  updated                  DateTime       @default(now())
  creatorId                String
  creator                  User           @relation(fields: [creatorId], references: [id], onDelete: Restrict)
}